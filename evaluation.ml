(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value = Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try 
        !(List.assoc varname env) 
      with
      | Not_found -> raise (EvalError "Env.lookup: no value for varid found")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: List.remove_assoc varname env

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      let f = Expr.exp_to_concrete_string in
      match v with
      | Val exp            -> f exp
      | Closure (exp, env) -> 
        if printenvp then "[" ^ env_to_string env ^ " âŠ¢ " ^ f exp ^ "]"
        else f exp

      and env_to_string (env : env) : string = 
        (List.fold_left (
          fun init (varid, valuer) -> 
            init ^ varid ^ " -> " ^ value_to_string !valuer ^ "; " 
          ) "{" env
        ) ^ "}"
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

type eval_type = 
  | Eval_s 
  | Eval_d 
  | Eval_l

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s ?(eval_type : eval_type = Eval_s) 
               (exp_s : expr) 
               (env_s : Env.env) : Env.value =
  let f = 
      match eval_type with
      | Eval_s -> eval_s ~eval_type:Eval_s
      | Eval_d -> eval_d
      | Eval_l -> eval_l in 
  match exp_s with
  | Unop (op, e) -> Env.Val(
    match f e env_s , op with
    | Env.Val (Num int)     , Negate   -> Num (~- int)
    | Env.Val (Float float) , F_Negate -> Float (~-. float)
    | _ -> raise (EvalError "Unop: improperly applied"))
  | Binop (op, e1, e2) -> Env.Val(
    match f e1 env_s , f e2 env_s with
    | Env.Val (Num int1) , Env.Val (Num int2) -> (
      match op with
      | Plus        -> Num (int1 + int2)
      | Minus       -> Num (int1 - int2)
      | Times       -> Num (int1 * int2)
      | DividedBy   -> Num (int1 / int2)
      | Equals      -> Bool (int1 = int2)
      | LessThan    -> Bool (int1 < int2)
      | GreaterThan -> Bool (int1 > int2)
      | _ -> raise (EvalError "Binop: can't apply float ops to non-floats"))
    | Env.Val (Float float1) , Env.Val (Float float2) -> (
      match op with
      | F_Plus      -> Float (float1 +. float2)
      | F_Minus     -> Float (float1 -. float2)
      | F_Times     -> Float (float1 *. float2)
      | F_DividedBy -> Float (float1 /. float2)
      | Equals      -> Bool (float1 = float2)
      | LessThan    -> Bool (float1 < float2)
      | GreaterThan -> Bool (float1 > float2)
      | _ -> raise (EvalError "Binop: can't apply int ops to non-ints"))
    | Env.Val (Bool bool1) , Env.Val (Bool bool2) -> Bool(
      match op with
      | Equals      -> bool1 = bool2
      | LessThan    -> bool1 < bool2
      | GreaterThan -> bool1 > bool2
      | _ -> raise (EvalError "Binop: can't apply bool ops on non-bools"))
    | Env.Val (Str s1) , Env.Val (Str s2) -> (
      match op with
      | Equals      -> Bool (s1 = s2)
      | LessThan    -> Bool (s1 < s2)
      | GreaterThan -> Bool (s1 > s2)
      | Concat      -> Str (s1 ^ s2)
      | _ -> raise (EvalError "Binop: can't apply string ops on non-strings"))
    | _ -> raise (EvalError "Binop: improperly applied"))
  | Conditional (cond, e1, e2) -> (
    match f cond env_s with
    | Env.Val (Bool bool) -> if bool then f e1 env_s else f e2 env_s
    | _ -> raise (EvalError "Conditional: can't condition on non-bools"))
  | Let (x, def, body) -> (
    match eval_s def env_s with
    | Env.Val vD -> eval_s (subst x vD body) env_s
    | _ -> raise (EvalError "Let: subst. semantics don't use Closures"))
  | Letrec (x, def, body) -> (
    match eval_s def env_s with
    | Env.Val vD -> let first_sub = subst x (Letrec (x, vD, Var x)) vD in
                    eval_s (subst x first_sub body) env_s
    | _ -> raise (EvalError "Letrec: subst. semantics don't use Closures"))
  | App (e1, e2) -> (
    match eval_s e1 env_s , eval_s e2 env_s with
    | Env.Val (Fun (x, body)) , Env.Val vQ -> eval_s (subst x vQ body) env_s
    | _ , _ -> raise (EvalError "App: first expression must be a function"))
  | Raise      -> raise EvalException               
  | Unassigned -> raise (EvalError "Unassigned")
  | Var _      -> raise (EvalError "unbound varid")
  | _          -> Env.Val exp_s

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
and eval_d (exp_d : expr) (env_d : Env.env) : Env.value = 
  match exp_d with
  | Let (x, def, body)
  | Letrec (x, def, body) -> (
    match eval_d def env_d with
    | Env.Val vD -> eval_d body (Env.extend env_d x (ref (Env.Val vD)))
    | _ -> raise (EvalError "Let: dynamic env. semantics don't use Closures"))
  | App (e1, e2) -> (
    match eval_d e1 env_d with
    | Env.Val (Fun (x, body)) ->
      eval_d body (Env.extend env_d x (ref (eval_d e2 env_d)))
    | _ -> raise (EvalError "App: first expression must be a function"))
  | Var x -> Env.lookup env_d x
  | _     -> eval_s ~eval_type:Eval_d exp_d env_d
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
and eval_l (exp_l : expr) (env_l : Env.env) : Env.value =
  match exp_l with
  | Let (x, def, body) -> 
    let vD = eval_l def env_l in
    eval_l body (Env.extend env_l x (ref vD))
  | Letrec (x, def, body) -> 
    let vD = ref (Env.Val Unassigned) in
    let env_x = Env.extend env_l x vD in
    vD := eval_l def env_x;
    eval_l body env_x
  | App (e1, e2) -> (
    match eval_l e1 env_l , eval_l e2 env_l with
    | Env.Closure (Fun (x, body), env_l) , vQ ->
      eval_l body (Env.extend env_l x (ref vQ))
    | _  -> raise (EvalError "App: first expression must be a function"))
  | Var x -> Env.lookup env_l x
  | Fun _ -> Env.close exp_l env_l
  | _     -> eval_s ~eval_type:Eval_l exp_l env_l ;; 

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate_s = eval_s ;;
let evaluate_d = eval_d ;;
let evaluate_l = eval_l ;;
